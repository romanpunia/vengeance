/*
	// @Gaussian is generated using following algorithm (js):
	function get_distribution(circles = 3, repeats = 11, samples = 4, radius = 0.5, angle = 90)
	{
		let points = [], rotation = 0.0;
		for (let k = 0; k < repeats; k++)
		{
			for (let i = 0; i < circles; i++)
			{
				for (let j = 0; j < samples; j++)
				{
					let theta = j * 2 * Math.PI / samples;
					theta += rotation;

					let x = Math.cos(theta), y = Math.sin(theta);
					x += x * radius * i;
					y += y * radius * i;

					points.push([x, y]);
				}
				rotation += (angle * Math.PI / 180) / repeats;
			}
		}

		let floats = '';
		for (let i = 0; i < points.length; i++)
			floats += `\tfloat2(${points[i][0]}, ${points[i][1]}),\n`;

		return floats.substring(0, floats.length - 2);
	}
*/
static const float2 Gaussian[132] =
{
	float2(1, 0),
	float2(6.123233995736766e-17, 1),
	float2(-1, 1.2246467991473532e-16),
	float2(-1.8369701987210297e-16, -1),
	float2(1.484732162821399, 0.2134722574099277),
	float2(-0.2134722574099275, 1.4847321628213992),
	float2(-1.4847321628213992, -0.21347225740992737),
	float2(0.2134722574099273, -1.4847321628213992),
	float2(1.9189859472289947, 0.5634651136828593),
	float2(-0.5634651136828593, 1.9189859472289947),
	float2(-1.918985947228995, -0.5634651136828588),
	float2(0.5634651136828587, -1.918985947228995),
	float2(0.9096319953545184, 0.4154150130018864),
	float2(-0.4154150130018863, 0.9096319953545184),
	float2(-0.9096319953545186, -0.4154150130018861),
	float2(0.41541501300188605, -0.9096319953545186),
	float2(1.261880299246772, 0.8109612261833963),
	float2(-0.8109612261833965, 1.2618802992467717),
	float2(-1.261880299246772, -0.8109612261833963),
	float2(0.8109612261833956, -1.2618802992467721),
	float2(1.5114991487085165, 1.3097214678905702),
	float2(-1.30972146789057, 1.5114991487085165),
	float2(-1.5114991487085168, -1.30972146789057),
	float2(1.3097214678905706, -1.5114991487085163),
	float2(0.654860733945285, 0.7557495743542583),
	float2(-0.7557495743542582, 0.6548607339452852),
	float2(-0.6548607339452852, -0.7557495743542582),
	float2(0.7557495743542584, -0.6548607339452849),
	float2(0.8109612261833963, 1.261880299246772),
	float2(-1.261880299246772, 0.8109612261833962),
	float2(-0.8109612261833962, -1.261880299246772),
	float2(1.261880299246772, -0.8109612261833962),
	float2(0.8308300260037729, 1.8192639907090367),
	float2(-1.8192639907090369, 0.8308300260037726),
	float2(-0.8308300260037728, -1.8192639907090369),
	float2(1.8192639907090367, -0.8308300260037729),
	float2(0.2817325568414298, 0.9594929736144974),
	float2(-0.9594929736144974, 0.28173255684142967),
	float2(-0.2817325568414297, -0.9594929736144974),
	float2(0.9594929736144974, -0.2817325568414298),
	float2(0.213472257409928, 1.484732162821399),
	float2(-1.484732162821399, 0.21347225740992776),
	float2(-0.21347225740992784, -1.484732162821399),
	float2(1.484732162821399, -0.21347225740992798),
	float2(5.66553889764798e-16, 2),
	float2(-2, 2.4492935982947064e-16),
	float2(-3.6739403974420594e-16, -2),
	float2(2, -4.898587196589413e-16),
	float2(-0.14231483827328478, 0.9898214418809328),
	float2(-0.9898214418809328, -0.14231483827328492),
	float2(0.14231483827328487, -0.9898214418809328),
	float2(0.9898214418809328, 0.1423148382732848),
	float2(-0.4225988352621439, 1.4392394604217462),
	float2(-1.4392394604217462, -0.4225988352621441),
	float2(0.42259883526214403, -1.4392394604217462),
	float2(1.4392394604217462, 0.4225988352621439),
	float2(-0.8308300260037719, 1.819263990709037),
	float2(-1.819263990709037, -0.8308300260037722),
	float2(0.8308300260037721, -1.819263990709037),
	float2(1.819263990709037, 0.830830026003772),
	float2(-0.5406408174555972, 0.8412535328311814),
	float2(-0.8412535328311814, -0.5406408174555972),
	float2(0.5406408174555971, -0.8412535328311814),
	float2(0.8412535328311815, 0.5406408174555971),
	float2(-0.9822911009179269, 1.133624361531388),
	float2(-1.133624361531388, -0.9822911009179269),
	float2(0.9822911009179268, -1.1336243615313881),
	float2(1.1336243615313881, 0.9822911009179268),
	float2(-1.5114991487085159, 1.309721467890571),
	float2(-1.309721467890571, -1.5114991487085156),
	float2(1.5114991487085156, -1.309721467890571),
	float2(1.3097214678905713, 1.5114991487085156),
	float2(-0.8412535328311808, 0.5406408174555981),
	float2(-0.5406408174555982, -0.8412535328311808),
	float2(0.8412535328311808, -0.5406408174555982),
	float2(0.5406408174555983, 0.8412535328311808),
	float2(-1.3644479930317772, 0.6231225195028307),
	float2(-0.6231225195028307, -1.364447993031777),
	float2(1.364447993031777, -0.6231225195028308),
	float2(0.6231225195028309, 1.364447993031777),
	float2(-1.9189859472289943, 0.563465113682861),
	float2(-0.5634651136828611, -1.9189859472289943),
	float2(1.9189859472289943, -0.5634651136828612),
	float2(0.5634651136828613, 1.9189859472289943),
	float2(-0.9898214418809326, 0.14231483827328606),
	float2(-0.14231483827328612, -0.9898214418809326),
	float2(0.9898214418809326, -0.14231483827328617),
	float2(0.14231483827328623, 0.9898214418809326),
	float2(-1.5, 1.515964649422291e-15),
	float2(-1.6078131593583423e-15, -1.5),
	float2(1.5, -1.6996616692943939e-15),
	float2(1.7915101792304454e-15, 1.5),
	float2(-1.9796428837618658, -0.2846296765465681),
	float2(0.284629676546568, -1.9796428837618658),
	float2(1.9796428837618658, 0.28462967654656784),
	float2(-0.28462967654656773, 1.9796428837618658),
	float2(-0.9594929736144977, -0.28173255684142856),
	float2(0.2817325568414285, -0.9594929736144977),
	float2(0.9594929736144978, 0.28173255684142845),
	float2(-0.2817325568414292, 0.9594929736144975),
	float2(-1.3644479930317783, -0.6231225195028279),
	float2(0.6231225195028278, -1.3644479930317783),
	float2(1.3644479930317785, 0.6231225195028277),
	float2(-0.6231225195028276, 1.3644479930317785),
	float2(-1.6825070656623637, -1.081281634911193),
	float2(1.081281634911193, -1.682507065662364),
	float2(1.682507065662364, 1.0812816349111927),
	float2(-1.0812816349111911, 1.6825070656623649),
	float2(-0.7557495743542593, -0.654860733945284),
	float2(0.6548607339452839, -0.7557495743542593),
	float2(0.7557495743542593, 0.6548607339452839),
	float2(-0.6548607339452839, 0.7557495743542594),
	float2(-0.9822911009179294, -1.133624361531386),
	float2(1.133624361531386, -0.9822911009179294),
	float2(0.9822911009179295, 1.1336243615313857),
	float2(-1.1336243615313866, 0.9822911009179285),
	float2(-1.0812816349111978, -1.6825070656623606),
	float2(1.6825070656623606, -1.081281634911198),
	float2(1.081281634911198, 1.6825070656623604),
	float2(-1.6825070656623604, 1.0812816349111982),
	float2(-0.415415013001888, -0.9096319953545177),
	float2(0.9096319953545177, -0.41541501300188804),
	float2(0.4154150130018881, 0.9096319953545177),
	float2(-0.9096319953545172, 0.41541501300188893),
	float2(-0.4225988352621471, -1.4392394604217453),
	float2(1.4392394604217453, -0.42259883526214714),
	float2(0.42259883526214725, 1.4392394604217453),
	float2(-1.4392394604217453, 0.4225988352621474),
	float2(-0.284629676546574, -1.979642883761865),
	float2(1.979642883761865, -0.2846296765465741),
	float2(0.28462967654657423, 1.979642883761865),
	float2(-1.9796428837618651, 0.2846296765465726)
};

float RandomFloat(float3 Value)
{
	return sin(dot(sin(Value), float3(12.9898, 78.233, 37.719))) * 143758.5453;
}
float RandomFloatXY(float X, float Y)
{
	return frac(sin(dot(float2(X, Y), float2(12.9898f, 78.233f))) * 43758.5453f);
}
float2 RandomFloat2(float2 Value)
{
	float X = saturate(frac(sin(dot(Value, float2(12.9898f, 78.233f))) * 43758.5453f)) * 2.0 - 1.0;
	float Y = saturate(frac(sin(dot(Value, float2(12.9898f, 78.233f) * 2.0)) * 43758.5453f)) * 2.0 - 1.0;
	return float2(X, Y);
}
float3 RandomFloat3(float2 Value)
{
	float X = saturate(frac(sin(dot(Value, float2(12.9898f, 78.233f))) * 43758.5453f)) * 2.0 - 1.0;
	float Y = saturate(frac(sin(dot(Value, float2(12.9898f, 78.233f) * 2.0)) * 43758.5453f)) * 2.0 - 1.0;
	float Z = saturate(frac(sin(dot(Value.yx, float2(12.9898f, 78.233f) * 4.0)) * 43758.5453f)) * 2.0 - 1.0;
	return float3(X, Y, Z);
}
float Hash12(float2 V)
{
	V = frac(V * float2(5.3987, 5.4421));
	V += dot(V.yx, V.xy + float2(21.5351, 14.3137));
	return frac(V.x * V.y * 95.4307);
}