# Include headers and libraries of external dependencies
set(VI_OPENGL ON CACHE BOOL "Enable opengl library")
set(VI_OPENAL ON CACHE BOOL "Enable openal-soft library")
set(VI_OPENSSL ON CACHE BOOL "Enable openssl library")
set(VI_SDL2 ON CACHE BOOL "Enable sdl2 library")
set(VI_GLEW ON CACHE BOOL "Enable glew library")
set(VI_SPIRV ON CACHE BOOL "Enable spirv-cross and glslang libraries")
set(VI_ZLIB ON CACHE BOOL "Enable zlib library")
set(VI_ASSIMP ON CACHE BOOL "Enable assimp library")
set(VI_MONGOC ON CACHE BOOL "Enable mongo-c-driver library")
set(VI_POSTGRESQL ON CACHE BOOL "Enable libpq library")
set(VI_SQLITE ON CACHE BOOL "Enable sqlite library")
if (VI_ASSIMP)
	find_path(ASSIMP_LOCATION assimp/scene.h)
	if (ASSIMP_LOCATION)
		if (NOT WIN32 OR NOT DEFINED ENV{VCPKG_ROOT} OR MSVC)
			target_include_directories(vitex PRIVATE ${ASSIMP_LOCATION})
			if (MSVC)
				find_package(assimp CONFIG QUIET)
			endif()
			if (NOT assimp_FOUND)
				find_library(assimp_FOUND "assimp")
				if (assimp_FOUND)
					set(ASSIMP_LIBRARIES "${assimp_FOUND}")
					target_compile_definitions(vitex PRIVATE -DVI_ASSIMP)
				endif()
			else()
				target_compile_definitions(vitex PRIVATE -DVI_ASSIMP)
			endif()
		else()
			message("Assimp library by @vcpkg can be used on Windows only under MSVC")
			set(ASSIMP_REJECT TRUE)
		endif()
		if (assimp_FOUND OR ASSIMP_LIBRARIES)
			if (DEFINED ASSIMP_LIBRARIES AND NOT MSVC)
				string(STRIP "${ASSIMP_LIBRARIES}" ASSIMP_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${ASSIMP_LIBRARIES})
				message(STATUS "Assimp library found")
			else()
				target_link_libraries(vitex PRIVATE assimp::assimp)
				message(STATUS "Assimp target library found")
			endif()
		else()
			if (NOT ASSIMP_REJECT)
				message("Assimp library was not found")
			endif()
		endif()
	else()
		if (NOT ASSIMP_REJECT)
			message("Assimp library was not found")
		endif()
	endif()
    unset(ASSIMP_LOCATION CACHE)
    unset(ASSIMP_LIBRARIES CACHE)
    unset(ASSIMP_REJECT CACHE)
    unset(assimp_FOUND CACHE)
    unset(assimp_DIR CACHE)
    unset(irrlicht_DIR CACHE)
    unset(kubazip_DIR CACHE)
    unset(minizip_DIR CACHE)
    unset(poly2tri_DIR CACHE)
    unset(polyclipping_DIR CACHE)
    unset(utf8cpp_DIR CACHE)
    unset(pugixml_DIR CACHE)
endif()
if (VI_FREETYPE)
	find_path(FREETYPE_LOCATION ft2build.h PATH_SUFFIXES "freetype2")
	if (FREETYPE_LOCATION)
		target_include_directories(vitex PRIVATE ${FREETYPE_LOCATION})
		find_package(Freetype QUIET)
		if (NOT Freetype_FOUND)
			find_library(Freetype_FOUND "freetype")
			if (Freetype_FOUND)
				set(FREETYPE_LIBRARIES "${Freetype_FOUND}")
				target_compile_definitions(vitex PRIVATE -DVI_FREETYPE)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_FREETYPE)
		endif()
		if (Freetype_FOUND OR FREETYPE_LIBRARIES)
			if (DEFINED FREETYPE_LIBRARIES)
				string(STRIP "${FREETYPE_LIBRARIES}" FREETYPE_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${FREETYPE_LIBRARIES})
				message(STATUS "FreeType library found")
			else()
				target_link_libraries(vitex PRIVATE Freetype::Freetype)
				message(STATUS "FreeType target library found")
			endif()
		else()
			message("FreeType library was not found")
		endif()
	else()
		message("FreeType library was not found")
	endif()
    unset(FREETYPE_LOCATION CACHE)
    unset(Freetype_FOUND CACHE)
    unset(FREETYPE_LIBRARIES CACHE)
    unset(FREETYPE_DIR CACHE)
    unset(FREETYPE_LOCATION CACHE)
    unset(Freetype_DIR CACHE)
endif()
if (VI_GLEW)
	find_path(GLEW_LOCATION GL/glew.h)
	if (GLEW_LOCATION)
		target_include_directories(vitex PRIVATE ${GLEW_LOCATION})
		find_package(GLEW QUIET)
		if (NOT GLEW_FOUND)
			find_library(GLEW_FOUND "GLEW")
			if (GLEW_FOUND)
				set(GLEW_LIBRARIES "${GLEW_FOUND}")
				target_compile_definitions(vitex PRIVATE -DVI_GLEW)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_GLEW)
		endif()
		if (GLEW_FOUND OR GLEW_LIBRARIES)
			if (DEFINED GLEW_LIBRARIES)
				string(STRIP "${GLEW_LIBRARIES}" GLEW_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${GLEW_LIBRARIES})
				message(STATUS "GLEW library found")
			else()
				target_link_libraries(vitex PRIVATE GLEW::GLEW)
				message(STATUS "GLEW target library found")
			endif()
		else()
			message("GLEW library was not found")
		endif()
	else()
		message("GLEW library was not found")
	endif()
    unset(GLEW_LOCATION CACHE)
    unset(GLEW_FOUND CACHE)
    unset(GLEW_LIBRARIES CACHE)
    unset(GLEW_DIR CACHE)
endif()
if (VI_MONGOC)
	find_path(MONGOC_LOCATION mongoc.h PATH_SUFFIXES "libmongoc-1.0")
	find_path(BSON_LOCATION bson.h PATH_SUFFIXES "libbson-1.0")
	if (MONGOC_LOCATION AND BSON_LOCATION)
		target_include_directories(vitex PRIVATE ${MONGOC_LOCATION})
		target_include_directories(vitex PRIVATE ${BSON_LOCATION})
		find_package(mongo-c-driver CONFIG QUIET)
		if (NOT mongo-c-driver_FOUND)
			find_library(MONGOC_LIBRARY "mongoc-1.0")
			find_library(BSONC_LIBRARY "bson-1.0")
			if (MONGOC_LIBRARY AND BSONC_LIBRARY)
				set(MONGOC_LIBRARIES "${MONGOC_LIBRARY};${BSONC_LIBRARY}")
				target_compile_definitions(vitex PRIVATE -DVI_MONGOC)
				unset(mongoc-c-driver_FOUND CACHE)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_MONGOC)
		endif()
		if (mongo-c-driver_FOUND OR MONGOC_LIBRARIES)
			if (DEFINED MONGOC_LIBRARIES)
				string(STRIP "${MONGOC_LIBRARIES}" MONGOC_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${MONGOC_LIBRARIES})
				message(STATUS "MongoDB library found")
			else()
				target_link_libraries(vitex PRIVATE mongo-c-driver::mongo-c-driver)
				message(STATUS "MongoDB target library found")
			endif()
		else()
			message("MongoDB library was not found")
		endif()
	else()
		message("MongoDB library was not found")
	endif()
    unset(MONGOC_LIBRARY CACHE)
    unset(BSONC_LIBRARY CACHE)
    unset(MONGOC_LOCATION CACHE)
    unset(mongo-c-driver_FOUND CACHE)
    unset(BSON_LOCATION CACHE)
    unset(BSON_LIBRARY CACHE)
    unset(bson-c-driver_FOUND CACHE)
    unset(MONGOC_LIBRARIES CACHE)
    unset(MONGOC_LIBRARY CACHE)
    unset(libbson-1.0_DIR CACHE)
    unset(mongo-c-driver_DIR CACHE)
endif()
if (VI_OPENAL)
	find_path(OPENAL_LOCATION AL/al.h)
    if (NOT OPENAL_LOCATION)
        find_path(OPENAL_LOCATION OpenAL/al.h)
        target_compile_definitions(vitex PRIVATE -DVI_AL_AT_OPENAL)
    endif()
	if (OPENAL_LOCATION)
		target_include_directories(vitex PRIVATE ${OPENAL_LOCATION})
		find_package(OpenAL CONFIG QUIET)
		if (NOT OpenAL_FOUND)
			find_library(OPENAL_LIBRARY "openal")
			if (OPENAL_LIBRARY)
				set(OPENAL_LIBRARIES "${OPENAL_LIBRARY}")
				target_compile_definitions(vitex PRIVATE -DVI_OPENAL)
				unset(OpenAL_FOUND CACHE)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_OPENAL)
		endif()
		if (OpenAL_FOUND OR OPENAL_LIBRARIES)
			if (DEFINED OPENAL_LIBRARIES)
				string(STRIP "${OPENAL_LIBRARIES}" OPENAL_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${OPENAL_LIBRARIES})
				message(STATUS "OpenAL library found")
			else()
				target_link_libraries(vitex PRIVATE OpenAL::OpenAL)
				message(STATUS "OpenAL target library found")
			endif()
		else()
			message("OpenAL library was not found")
		endif()
	else()
		message("OpenAL library was not found")
	endif()
    unset(OPENAL_LIBRARY CACHE)
    unset(OPENAL_LOCATION CACHE)
    unset(OpenAL_FOUND CACHE)
    unset(OPENAL_LIBRARIES CACHE)
    unset(OpenAL_DIR CACHE)
endif()
if (VI_OPENGL)
    set(OpenGL_GL_PREFERENCE "GLVND")
	find_path(OPENGL_LOCATION GL/gl.h OpenGL/OpenGL.h PATHS ${OPENGL_INCLUDE_DIR})
	if (OPENGL_LOCATION)
		target_include_directories(vitex PRIVATE ${OPENGL_LOCATION})
		find_package(OpenGL QUIET)
		if (NOT OpenGL_FOUND)
			find_library(OpenGL_FOUND "OpenGL")
			if (OpenGL_FOUND)
				set(OPENGL_LIBRARIES "${OpenGL_FOUND}")
				target_compile_definitions(vitex PRIVATE -DVI_OPENGL)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_OPENGL)
		endif()
		if (OpenGL_FOUND OR OPENGL_LIBRARIES)
			if (DEFINED OPENGL_LIBRARIES)
				string(STRIP "${OPENGL_LIBRARIES}" OPENGL_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${OPENGL_LIBRARIES})
				message(STATUS "OpenGL library found")
			else()
				target_link_libraries(vitex PRIVATE OpenGL::GL)
				message(STATUS "OpenGL target library found")
			endif()
		else()
			message("OpenGL library was not found")
		endif()
	else()
		message("OpenGL library was not found")
	endif()
    unset(OPENGL_LOCATION CACHE)
    unset(OpenGL_FOUND CACHE)
    unset(OPENGL_LIBRARIES CACHE)
    unset(OpenGL_GL_PREFERENCE CACHE)
endif()
if (VI_OPENSSL)
	find_path(OpenSSL_LOCATION openssl/aes.h)
	if (OpenSSL_LOCATION)
		target_include_directories(vitex PRIVATE ${OpenSSL_LOCATION})
		find_package(OpenSSL QUIET)
		if (NOT OpenSSL_FOUND)
			find_library(OpenSSL_FOUND "ssl")
			find_library(OpenCRYPTO_FOUND "crypto")
			if (OpenSSL_FOUND AND OpenCRYPTO_FOUND)
				set(OPENSSL_LIBRARIES "${OpenSSL_FOUND};${OpenCRYPTO_FOUND}")
				target_compile_definitions(vitex PRIVATE -DVI_OPENSSL)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_OPENSSL)
		endif()
		if (OpenSSL_FOUND OR OPENSSL_LIBRARIES)
			if (DEFINED OPENSSL_LIBRARIES)
				string(STRIP "${OPENSSL_LIBRARIES}" OPENSSL_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${OPENSSL_LIBRARIES})
				message(STATUS "OpenSSL library found")
			else()
				target_link_libraries(vitex PRIVATE OpenSSL::SSL OpenSSL::Crypto)
				message(STATUS "OpenSSL target library found")
			endif()
		else()
			message("OpenSSL library was not found")
		endif()
	else()
		message("OpenSSL library was not found")
	endif()
    unset(OpenSSL_LOCATION CACHE)
    unset(OpenSSL_FOUND CACHE)
    unset(OPENSSL_LIBRARIES CACHE)
    unset(OpenCRYPTO_FOUND CACHE)
    unset(LIB_EAY_DEBUG CACHE)
    unset(LIB_EAY_RELEASE CACHE)
    unset(SSL_EAY_DEBUG CACHE)
    unset(SSL_EAY_RELEASE CACHE)
    unset(OPENSSL_APPLINK_SOURCE CACHE)
endif()
if (VI_POSTGRESQL)
	find_path(POSTGRESQL_LOCATION libpq-fe.h PATH_SUFFIXES "libpq" PATHS "/usr/include/postgresql" "/usr/local/opt/libpq/include")
	if (POSTGRESQL_LOCATION)
		target_include_directories(vitex PRIVATE ${POSTGRESQL_LOCATION})
		find_package(PostgreSQL CONFIG QUIET)
		if (NOT PostgreSQL_FOUND)
			find_library(POSTGRESQL_LIBRARY NAMES "pq" "libpq" PATH_SUFFIXES "lib")
			if (POSTGRESQL_LIBRARY)
				set(PostgreSQL_LIBRARIES "${POSTGRESQL_LIBRARY}")
				target_compile_definitions(vitex PRIVATE -DVI_POSTGRESQL)
				unset(PostgreSQL_FOUND CACHE)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_POSTGRESQL)
		endif()
		if (PostgreSQL_FOUND OR PostgreSQL_LIBRARIES)
			if (DEFINED PostgreSQL_LIBRARIES)
				string(STRIP "${PostgreSQL_LIBRARIES}" PostgreSQL_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${PostgreSQL_LIBRARIES})
				message(STATUS "PostgreSQL library found")
			else()
				target_link_libraries(vitex PRIVATE PostgreSQL::PostgreSQL)
				message(STATUS "PostgreSQL target library found")
			endif()
		else()
			message("PostgreSQL library was not found")
		endif()
	else()
		message("PostgreSQL library was not found")
	endif()
    unset(POSTGRESQL_LIBRARY CACHE)
    unset(POSTGRESQL_LOCATION CACHE)
    unset(PostgreSQL_FOUND CACHE)
    unset(PostgreSQL_LIBRARIES CACHE)
    unset(PostgreSQL_DIR CACHE)
    unset(PostgreSQL_LIBRARY_DEBUG CACHE)
endif()
if (VI_SQLITE)
	find_path(SQLITE_LOCATION sqlite3.h)
	if (SQLITE_LOCATION)
		target_include_directories(vitex PRIVATE ${SQLITE_LOCATION})
		find_package(SQLite3 CONFIG QUIET)
		if (NOT SQLite3_FOUND)
			find_library(SQLITE_LIBRARY "sqlite3")
			if (SQLITE_LIBRARY)
				set(SQLite3_LIBRARIES "${SQLITE_LIBRARY}")
				target_compile_definitions(vitex PRIVATE -DVI_SQLITE)
				unset(SQLite3_FOUND CACHE)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_SQLITE)
		endif()
		if (SQLite3_FOUND OR SQLite3_LIBRARIES)
			if (DEFINED SQLite3_LIBRARIES)
				string(STRIP "${SQLite3_LIBRARIES}" SQLite3_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${SQLite3_LIBRARIES})
				message(STATUS "SQLite3 library found")
			else()
				target_link_libraries(vitex PRIVATE SQLite3::SQLite3)
				message(STATUS "SQLite3 target library found")
			endif()
		else()
			message("SQLite3 library was not found")
		endif()
	else()
		message("SQLite library was not found")
	endif()
    unset(SQLITE_LIBRARY CACHE)
    unset(SQLITE_LOCATION CACHE)
    unset(SQLite3_FOUND CACHE)
    unset(SQLite3_LIBRARIES CACHE)
    unset(SQLite3_DIR CACHE)
    unset(SQLite3_LIBRARY_DEBUG CACHE)
endif()
if (VI_SDL2)
	find_path(SDL2_LOCATION SDL2/SDL.h)
	if (SDL2_LOCATION)
		target_include_directories(vitex PRIVATE ${SDL2_LOCATION})
		find_package(SDL2 CONFIG QUIET)
		if (NOT SDL2_FOUND)
			find_library(SDL2_FOUND "SDL2")
			if (SDL2_FOUND)
				set(SDL2_LIBRARIES "${SDL2_FOUND}")
				target_compile_definitions(vitex PRIVATE -DVI_SDL2)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_SDL2)
		endif()
		if (SDL2_FOUND OR SDL2_LIBRARIES)
			if (DEFINED SDL2_LIBRARIES)
				string(STRIP "${SDL2_LIBRARIES}" SDL2_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${SDL2_LIBRARIES})
				message(STATUS "SDL2 library found")
			else()
				target_link_libraries(vitex PRIVATE SDL2::SDL2)
				message(STATUS "SDL2 target library found")
			endif()
		else()
			message("SDL2 library was not found")
		endif()
	else()
		message("SDL2 library was not found")
	endif()
    unset(SDL2_LOCATION CACHE)
    unset(SDL2_FOUND CACHE)
    unset(SDL2_LIBRARIES CACHE)
    unset(SDL2_DIR CACHE)
endif()
if (VI_SPIRV)
	find_path(SPIRV_LOCATION spirv.hpp PATH_SUFFIXES "spirv")
	find_path(SPIRV_LOCATION spirv_cross.hpp PATH_SUFFIXES "spirv_cross")
	find_path(GLSLANG_LOCATION ShaderLang.h PATH_SUFFIXES "glslang/Public")
	if (SPIRV_LOCATION AND SPIRV_LOCATION AND GLSLANG_LOCATION)
		string(REPLACE "/Public" "" GLSLANG_LOCATION ${GLSLANG_LOCATION})
		target_include_directories(vitex PRIVATE ${SPIRV_LOCATION})
		target_include_directories(vitex PRIVATE ${SPIRV_LOCATION})
		target_include_directories(vitex PRIVATE ${GLSLANG_LOCATION})
		find_package(spirv_cross_core QUIET)
		find_package(spirv_cross_cpp QUIET)
		find_package(spirv_cross_glsl QUIET)
		find_package(spirv_cross_hlsl QUIET)
		find_package(spirv_cross_msl QUIET)
		find_package(spirv_cross_reflect QUIET)
		find_package(spirv_cross_util QUIET)
		if (NOT spirv_cross_core_FOUND OR NOT spirv_cross_cpp_FOUND OR NOT spirv_cross_glsl_FOUND OR NOT spirv_cross_hlsl_FOUND OR NOT spirv_cross_msl_FOUND OR NOT spirv_cross_reflect_FOUND OR NOT spirv_cross_util_FOUND)
			find_library(SPIRV_CORE_LIBRARY "spirv-cross-core")
			find_library(SPIRV_CORE_LIBRARY_D "spirv-cross-cored")
			find_library(SPIRV_CPP_LIBRARY "spirv-cross-cpp")
			find_library(SPIRV_CPP_LIBRARY_D "spirv-cross-cppd")
			find_library(SPIRV_GLSL_LIBRARY "spirv-cross-glsl")
			find_library(SPIRV_GLSL_LIBRARY_D "spirv-cross-glsld")
			find_library(SPIRV_HLSL_LIBRARY "spirv-cross-hlsl")
			find_library(SPIRV_HLSL_LIBRARY_D "spirv-cross-hlsld")
			find_library(SPIRV_MSL_LIBRARY "spirv-cross-msl")
			find_library(SPIRV_MSL_LIBRARY_D "spirv-cross-msld")
			find_library(SPIRV_REFLECT_LIBRARY "spirv-cross-reflect")
			find_library(SPIRV_REFLECT_LIBRARY_D "spirv-cross-reflectd")
			find_library(SPIRV_UTIL_LIBRARY "spirv-cross-util")
			find_library(SPIRV_UTIL_LIBRARY_D "spirv-cross-utild")
            if (SPIRV_CORE_LIBRARY AND SPIRV_CPP_LIBRARY AND SPIRV_GLSL_LIBRARY AND SPIRV_HLSL_LIBRARY AND SPIRV_MSL_LIBRARY AND SPIRV_REFLECT_LIBRARY AND SPIRV_UTIL_LIBRARY)
			    set(SPIRV_RELEASE TRUE)
            else()
                set(SPIRV_RELEASE FALSE)
            endif()
            if (SPIRV_CORE_LIBRARY_D AND SPIRV_CPP_LIBRARY_D AND SPIRV_GLSL_LIBRARY_D AND SPIRV_HLSL_LIBRARY_D AND SPIRV_MSL_LIBRARY_D AND SPIRV_REFLECT_LIBRARY_D AND SPIRV_UTIL_LIBRARY_D)
                set(SPIRV_DEBUG TRUE)
            else()
                set(SPIRV_DEBUG FALSE)
            endif()
        endif()
		if ((spirv_cross_core_FOUND AND spirv_cross_cpp_FOUND AND spirv_cross_glsl_FOUND AND spirv_cross_hlsl_FOUND AND spirv_cross_msl_FOUND AND spirv_cross_reflect_FOUND AND spirv_cross_util_FOUND) OR SPIRV_RELEASE)
			if (SPIRV_RELEASE)
				if (SPIRV_DEBUG)
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_CORE_LIBRARY} debug ${SPIRV_CORE_LIBRARY_D})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_CPP_LIBRARY} debug ${SPIRV_CPP_LIBRARY_D})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_GLSL_LIBRARY} debug ${SPIRV_GLSL_LIBRARY_D})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_HLSL_LIBRARY} debug ${SPIRV_HLSL_LIBRARY_D})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_MSL_LIBRARY} debug ${SPIRV_MSL_LIBRARY_D})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_REFLECT_LIBRARY} debug ${SPIRV_REFLECT_LIBRARY_D})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_UTIL_LIBRARY} debug ${SPIRV_UTIL_LIBRARY_D})
				else()
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_CORE_LIBRARY})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_CPP_LIBRARY})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_GLSL_LIBRARY})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_HLSL_LIBRARY})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_MSL_LIBRARY})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_REFLECT_LIBRARY})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_UTIL_LIBRARY})
				endif()
				message(STATUS "SPIR-V libraries found")
			else()
				target_link_libraries(vitex PRIVATE spirv-cross-core spirv-cross-cpp spirv-cross-glsl spirv-cross-hlsl spirv-cross-msl spirv-cross-reflect spirv-cross-util)
				message(STATUS "SPIR-V target libraries found")
			endif()
		else()
			message("SPIR-V libraries were not found")
		endif()	
		find_package(glslang QUIET)
		if (NOT glslang_FOUND)
			find_library(glslang_FOUND "glslang")
			find_library(glslangd_FOUND "glslangd")
			if (glslang_FOUND)
				set(GLSLANG_LIBRARY "${glslang_FOUND}")
			endif()
			if (glslangd_FOUND)
				set(GLSLANG_LIBRARY_D "${glslangd_FOUND}")
			endif()
		endif()
		if (glslang_FOUND OR GLSLANG_LIBRARY)
		    find_package(Threads QUIET)
            if (Threads_FOUND)
                target_link_libraries(vitex PRIVATE Threads::Threads)
            endif()
			if (DEFINED GLSLANG_LIBRARY)
				string(STRIP "${GLSLANG_LIBRARY}" GLSLANG_LIBRARY)
				if (DEFINED GLSLANG_LIBRARY_D)
					target_link_libraries(vitex PRIVATE optimized ${GLSLANG_LIBRARY} debug ${GLSLANG_LIBRARY_D})
				else()
					target_link_libraries(vitex PRIVATE optimized ${GLSLANG_LIBRARY})
				endif()
				message(STATUS "Glslang library found")
			else()
				target_link_libraries(vitex PRIVATE glslang::HLSL glslang::SPIRV glslang::glslang glslang::OGLCompiler)
				message(STATUS "Glslang target library found")
			endif()
		else()
			message("Glslang library was not found")
		endif()
		if (((spirv_cross_core_FOUND AND spirv_cross_cpp_FOUND AND spirv_cross_glsl_FOUND AND spirv_cross_hlsl_FOUND AND spirv_cross_msl_FOUND AND spirv_cross_reflect_FOUND AND spirv_cross_util_FOUND) OR SPIRV_RELEASE) AND (glslang_FOUND OR GLSLANG_LIBRARY))
			target_compile_definitions(vitex PRIVATE -DVI_SPIRV)
		endif()
	else()
		message("SPIR-V and/or Glslang libraries were not found")
	endif()
    unset(SPIRV_LOCATION CACHE)
    unset(SPIRV_LOCATION CACHE)
    unset(GLSLANG_LOCATION CACHE)
    unset(spirv_cross_cpp_FOUND CACHE)
    unset(spirv_cross_glsl_FOUND CACHE)
    unset(spirv_cross_hlsl_FOUND CACHE)
    unset(spirv_cross_msl_FOUND CACHE)
    unset(glslang_FOUND CACHE)
    unset(glslangd_FOUND CACHE)
    unset(SPIRV_CORE_LIBRARY CACHE)
    unset(SPIRV_CORE_LIBRARY_D CACHE)
    unset(SPIRV_CPP_LIBRARY CACHE)
    unset(SPIRV_CPP_LIBRARY_D CACHE)
    unset(SPIRV_GLSL_LIBRARY CACHE)
    unset(SPIRV_GLSL_LIBRARY_D CACHE)
    unset(SPIRV_HLSL_LIBRARY CACHE)
    unset(SPIRV_HLSL_LIBRARY_D CACHE)
    unset(SPIRV_MSL_LIBRARY CACHE)
    unset(SPIRV_MSL_LIBRARY_D CACHE)
    unset(SPIRV_REFLECT_LIBRARY CACHE)
    unset(SPIRV_REFLECT_LIBRARY_D CACHE)
    unset(SPIRV_UTIL_LIBRARY CACHE)
    unset(SPIRV_UTIL_LIBRARY_D CACHE)
    unset(SPIRV_RELEASE CACHE)
    unset(SPIRV_DEBUG CACHE)
    unset(GLSLANG_LIBRARY CACHE)
    unset(GLSLANG_LIBRARY_D CACHE)
    unset(glslang_DIR CACHE)
    unset(spirv_cross_core_DIR CACHE)
    unset(spirv_cross_cpp_DIR CACHE)
    unset(spirv_cross_glsl_DIR CACHE)
    unset(spirv_cross_hlsl_DIR CACHE)
    unset(spirv_cross_msl_DIR CACHE)
    unset(spirv_cross_reflect_DIR CACHE)
    unset(spirv_cross_util_DIR CACHE)
endif()
if (VI_ZLIB)
	find_path(ZLIB_LOCATION zlib.h)
	if (ZLIB_LOCATION)
		target_include_directories(vitex PRIVATE ${ZLIB_LOCATION})
		find_package(ZLIB QUIET)
		if (NOT ZLIB_FOUND)
			find_library(ZLIB_FOUND "zlib")
			if (ZLIB_FOUND)
				set(ZLIB_LIBRARIES "${ZLIB_FOUND}")
				target_compile_definitions(vitex PRIVATE -DVI_ZLIB)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_ZLIB)
		endif()
		if (ZLIB_FOUND OR ZLIB_LIBRARIES)
			if (DEFINED ZLIB_LIBRARIES)
				string(STRIP "${ZLIB_LIBRARIES}" ZLIB_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${ZLIB_LIBRARIES})
				message(STATUS "ZLib library found")
			else()
				target_link_libraries(vitex PRIVATE ZLIB::ZLIB)
				message(STATUS "ZLib target library found")
			endif()
		else()
			message("ZLib library was not found")
		endif()
	else()
		message("ZLib library was not found")
	endif()
    unset(ZLIB_LOCATION CACHE)
    unset(ZLIB_FOUND CACHE)
    unset(ZLIB_LIBRARIES CACHE)
endif()