# Include headers and libraries of external dependencies
set(VI_OPENGL ON CACHE BOOL "Enable opengl library")
set(VI_OPENAL ON CACHE BOOL "Enable openal-soft library")
set(VI_SDL2 ON CACHE BOOL "Enable sdl2 library")
set(VI_GLEW ON CACHE BOOL "Enable glew library")
set(VI_SPIRV ON CACHE BOOL "Enable spirv-cross and glslang libraries")
set(VI_ASSIMP ON CACHE BOOL "Enable assimp library")
if (VI_ASSIMP)
	find_path(EXTERN_INCLUDE assimp/scene.h)
	find_library(EXTERN_LIB assimp NAMES
		assimp-vc120-mt
		assimp-vc140-mt
		assimp-vc141-mt
		assimp-vc142-mt
		assimp-vc143-mt
		assimp-vc120-mtd
		assimp-vc140-mtd
		assimp-vc141-mtd
		assimp-vc142-mtd
		assimp-vc143-mtd)
	if (EXTERN_INCLUDE AND EXTERN_LIB)
		target_compile_definitions(vitex PRIVATE -DVI_ASSIMP)
		target_include_directories(vitex PRIVATE ${EXTERN_INCLUDE})
		target_link_libraries(vitex PRIVATE ${EXTERN_LIB})
		message(STATUS "Load library @assimp - OK")
	else()
		message("Load library @assimp - not found")
	endif()
	unset(EXTERN_INCLUDE CACHE)
	unset(EXTERN_LIB CACHE)
endif()
if (VI_FREETYPE)
	find_path(EXTERN_INCLUDE ft2build.h PATH_SUFFIXES freetype2)
	find_library(EXTERN_LIB freetype)
	if (EXTERN_INCLUDE AND EXTERN_LIB)
		target_compile_definitions(vitex PRIVATE -DVI_FREETYPE)
		target_include_directories(vitex PRIVATE ${EXTERN_INCLUDE})
		target_link_libraries(vitex PRIVATE ${EXTERN_LIB})
		message(STATUS "Load library @freetype - OK")
	else()
		message("Load library @freetype - not found")
	endif()
	unset(EXTERN_INCLUDE CACHE)
	unset(EXTERN_LIB CACHE)
	unset(Freetype_DIR CACHE)
endif()
if (VI_GLEW)
	find_path(EXTERN_INCLUDE GL/glew.h)
	find_library(EXTERN_LIB GLEW NAMES
		glew
		glew32)
	if (EXTERN_INCLUDE AND EXTERN_LIB)
		target_compile_definitions(vitex PRIVATE -DVI_GLEW)
		target_include_directories(vitex PRIVATE ${EXTERN_INCLUDE})
		target_link_libraries(vitex PRIVATE ${EXTERN_LIB})
		message(STATUS "Load library @glew - OK")
	else()
		message("Load library @glew - not found")
	endif()
	unset(EXTERN_INCLUDE CACHE)
	unset(EXTERN_LIB CACHE)
endif()
if (VI_OPENAL)
	find_path(EXTERN_INCLUDE AL/al.h)
	find_library(EXTERN_LIB openal NAMES
		OpenAL
		OpenAL32)
    if (NOT EXTERN_INCLUDE)
		unset(EXTERN_INCLUDE CACHE)
        find_path(EXTERN_INCLUDE OpenAL/al.h)
        target_compile_definitions(vitex PRIVATE -DVI_AL_AT_OPENAL)
    endif()
	if (EXTERN_INCLUDE AND EXTERN_LIB)
		target_compile_definitions(vitex PRIVATE -DVI_OPENAL)
		target_include_directories(vitex PRIVATE ${EXTERN_INCLUDE})
		target_link_libraries(vitex PRIVATE ${EXTERN_LIB})
		message(STATUS "Load library @openal-soft - OK")
	else()
		message("Load library @openal-soft - not found")
	endif()
	unset(EXTERN_INCLUDE CACHE)
	unset(EXTERN_LIB CACHE)
endif()
if (VI_OPENGL)
	set(OpenGL_GL_PREFERENCE "GLVND")
	find_path(EXTERN_INCLUDE GL/gl.h OpenGL/OpenGL.h PATHS ${OPENGL_INCLUDE_DIR})
	find_package(OpenGL QUIET)
	if (EXTERN_INCLUDE AND OpenGL_FOUND)
		target_compile_definitions(vitex PRIVATE -DVI_OPENGL)
		target_include_directories(vitex PRIVATE ${EXTERN_INCLUDE})
		target_link_libraries(vitex PRIVATE OpenGL::GL)
		message(STATUS "Load library @opengl - OK")
	else()
		message("Load library @opengl - not found")
	endif()
	unset(EXTERN_INCLUDE CACHE)
	unset(OpenGL_FOUND CACHE)
endif()
if (VI_SDL2)
	find_path(EXTERN_INCLUDE SDL2/SDL.h)
	find_library(EXTERN_LIB SDL2)
	if (EXTERN_INCLUDE AND EXTERN_LIB)
		target_compile_definitions(vitex PRIVATE -DVI_SDL2)
		target_include_directories(vitex PRIVATE ${EXTERN_INCLUDE})
		target_link_libraries(vitex PRIVATE ${EXTERN_LIB})
		message(STATUS "Load library @sdl2 - OK")
	else()
		message("Load library @sdl2 - not found")
	endif()
	unset(EXTERN_INCLUDE CACHE)
	unset(EXTERN_LIB CACHE)
endif()
if (VI_SPIRV)
	find_path(EXTERN_INCLUDE1 spirv_cross.hpp PATH_SUFFIXES spirv_cross)
	find_path(EXTERN_INCLUDE2 ShaderLang.h PATH_SUFFIXES glslang/Public)
	find_package(spirv_cross_core QUIET)
	find_package(spirv_cross_cpp QUIET)
	find_package(spirv_cross_glsl QUIET)
	find_package(spirv_cross_hlsl QUIET)
	find_package(spirv_cross_msl QUIET)
	find_package(glslang QUIET)
	find_package(Threads QUIET)
	if (EXTERN_INCLUDE1 AND EXTERN_INCLUDE2 AND spirv_cross_core_DIR AND spirv_cross_cpp_DIR AND spirv_cross_glsl_DIR AND spirv_cross_hlsl_DIR AND spirv_cross_msl_DIR AND glslang_DIR)
		target_compile_definitions(vitex PRIVATE -DVI_SPIRV)
		target_include_directories(vitex PRIVATE ${EXTERN_INCLUDE1} ${EXTERN_INCLUDE2})
		target_link_libraries(vitex PRIVATE spirv-cross-core spirv-cross-cpp spirv-cross-glsl spirv-cross-hlsl spirv-cross-msl glslang::SPVRemapper glslang::SPIRV glslang::glslang glslang::glslang-default-resource-limits)
		if (Threads_FOUND)
			target_link_libraries(vitex PRIVATE Threads::Threads)
		endif()
		message(STATUS "Load library @spirv-cross/@glslang - OK")
	else()
		message("Load library @spirv-cross/@glslang - not found")
	endif()
	unset(EXTERN_INCLUDE1 CACHE)
	unset(EXTERN_INCLUDE2 CACHE)
	unset(spirv_cross_core_DIR CACHE)
	unset(spirv_cross_cpp_DIR CACHE)
	unset(spirv_cross_glsl_DIR CACHE)
	unset(spirv_cross_hlsl_DIR CACHE)
	unset(spirv_cross_msl_DIR CACHE)
	unset(glslang_DIR CACHE)
endif()