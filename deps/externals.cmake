# Include headers and libraries of external dependencies
set(VI_OPENGL ON CACHE BOOL "Enable opengl library")
set(VI_OPENAL ON CACHE BOOL "Enable openal-soft library")
set(VI_SDL2 ON CACHE BOOL "Enable sdl2 library")
set(VI_GLEW ON CACHE BOOL "Enable glew library")
set(VI_SPIRV ON CACHE BOOL "Enable spirv-cross and glslang libraries")
set(VI_ASSIMP ON CACHE BOOL "Enable assimp library")
if (VI_ASSIMP)
	find_path(ASSIMP_LOCATION assimp/scene.h)
	if (ASSIMP_LOCATION)
		if (NOT WIN32 OR NOT DEFINED ENV{VCPKG_ROOT} OR MSVC)
			target_include_directories(vitex PRIVATE ${ASSIMP_LOCATION})
			if (MSVC)
				find_package(assimp CONFIG QUIET)
			endif()
			if (NOT assimp_FOUND)
				find_library(assimp_FOUND "assimp")
				if (assimp_FOUND)
					set(ASSIMP_LIBRARIES "${assimp_FOUND}")
					target_compile_definitions(vitex PRIVATE -DVI_ASSIMP)
				endif()
			else()
				target_compile_definitions(vitex PRIVATE -DVI_ASSIMP)
			endif()
		else()
			message("Load library @assimp - supplied by vcpkg on Windows works only under MSVC")
			set(ASSIMP_REJECT TRUE)
		endif()
		if (assimp_FOUND OR ASSIMP_LIBRARIES)
			if (DEFINED ASSIMP_LIBRARIES AND NOT MSVC)
				string(STRIP "${ASSIMP_LIBRARIES}" ASSIMP_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${ASSIMP_LIBRARIES})
				message(STATUS "Load library @assimp - OK")
			else()
				target_link_libraries(vitex PRIVATE assimp::assimp)
				message(STATUS "Load package @assimp - OK")
			endif()
		else()
			if (NOT ASSIMP_REJECT)
				message("Load library @assimp - lib not found")
			endif()
		endif()
	else()
		if (NOT ASSIMP_REJECT)
			message("Load library @assimp - include not found")
		endif()
	endif()
    unset(ASSIMP_LOCATION CACHE)
    unset(ASSIMP_LIBRARIES CACHE)
    unset(ASSIMP_REJECT CACHE)
    unset(assimp_FOUND CACHE)
    unset(assimp_DIR CACHE)
    unset(irrlicht_DIR CACHE)
    unset(kubazip_DIR CACHE)
    unset(minizip_DIR CACHE)
    unset(poly2tri_DIR CACHE)
    unset(polyclipping_DIR CACHE)
    unset(utf8cpp_DIR CACHE)
    unset(pugixml_DIR CACHE)
endif()
if (VI_FREETYPE)
	find_path(FREETYPE_LOCATION ft2build.h PATH_SUFFIXES "freetype2")
	if (FREETYPE_LOCATION)
		target_include_directories(vitex PRIVATE ${FREETYPE_LOCATION})
		find_package(Freetype QUIET)
		if (NOT Freetype_FOUND)
			find_library(Freetype_FOUND "freetype")
			if (Freetype_FOUND)
				set(FREETYPE_LIBRARIES "${Freetype_FOUND}")
				target_compile_definitions(vitex PRIVATE -DVI_FREETYPE)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_FREETYPE)
		endif()
		if (Freetype_FOUND OR FREETYPE_LIBRARIES)
			if (DEFINED FREETYPE_LIBRARIES)
				string(STRIP "${FREETYPE_LIBRARIES}" FREETYPE_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${FREETYPE_LIBRARIES})
				message(STATUS "Load library @freetype - OK")
			else()
				target_link_libraries(vitex PRIVATE Freetype::Freetype)
				message(STATUS "Load package @freetype - OK")
			endif()
		else()
			message("Load library @freetype - lib not found")
		endif()
	else()
		message("Load library @freetype - include not found")
	endif()
    unset(FREETYPE_LOCATION CACHE)
    unset(Freetype_FOUND CACHE)
    unset(FREETYPE_LIBRARIES CACHE)
    unset(FREETYPE_DIR CACHE)
    unset(FREETYPE_LOCATION CACHE)
    unset(Freetype_DIR CACHE)
endif()
if (VI_GLEW)
	find_path(GLEW_LOCATION GL/glew.h)
	if (GLEW_LOCATION)
		target_include_directories(vitex PRIVATE ${GLEW_LOCATION})
		find_package(GLEW QUIET)
		if (NOT GLEW_FOUND)
			find_library(GLEW_FOUND "GLEW")
			if (GLEW_FOUND)
				set(GLEW_LIBRARIES "${GLEW_FOUND}")
				target_compile_definitions(vitex PRIVATE -DVI_GLEW)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_GLEW)
		endif()
		if (GLEW_FOUND OR GLEW_LIBRARIES)
			if (NOT (NOT GLEW_LIBRARIES))
				string(STRIP "${GLEW_LIBRARIES}" GLEW_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${GLEW_LIBRARIES})
				message(STATUS "Load library @glew - OK")
			else()
				target_link_libraries(vitex PRIVATE GLEW::GLEW)
				message(STATUS "Load package @glew - OK")
			endif()
		else()
			message("Load library @glew - lib not found")
		endif()
	else()
		message("Load library @glew - include not found")
	endif()
    unset(GLEW_LOCATION CACHE)
    unset(GLEW_FOUND CACHE)
    unset(GLEW_LIBRARIES CACHE)
    unset(GLEW_DIR CACHE)
endif()
if (VI_OPENAL)
	find_path(OPENAL_LOCATION AL/al.h)
    if (NOT OPENAL_LOCATION)
        find_path(OPENAL_LOCATION OpenAL/al.h)
        target_compile_definitions(vitex PRIVATE -DVI_AL_AT_OPENAL)
    endif()
	if (OPENAL_LOCATION)
		target_include_directories(vitex PRIVATE ${OPENAL_LOCATION})
		find_package(OpenAL CONFIG QUIET)
		if (NOT OpenAL_FOUND)
			find_library(OPENAL_LIBRARY "openal")
			if (OPENAL_LIBRARY)
				set(OPENAL_LIBRARIES "${OPENAL_LIBRARY}")
				target_compile_definitions(vitex PRIVATE -DVI_OPENAL)
				unset(OpenAL_FOUND CACHE)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_OPENAL)
		endif()
		if (OpenAL_FOUND OR OPENAL_LIBRARIES)
			if (DEFINED OPENAL_LIBRARIES)
				string(STRIP "${OPENAL_LIBRARIES}" OPENAL_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${OPENAL_LIBRARIES})
				message(STATUS "Load library @openal-soft - OK")
			else()
				target_link_libraries(vitex PRIVATE OpenAL::OpenAL)
				message(STATUS "Load package @openal-soft - OK")
			endif()
		else()
			message("Load library @openal-soft - lib not found")
		endif()
	else()
		message("Load library @openal-soft - include not found")
	endif()
    unset(OPENAL_LIBRARY CACHE)
    unset(OPENAL_LOCATION CACHE)
    unset(OpenAL_FOUND CACHE)
    unset(OPENAL_LIBRARIES CACHE)
    unset(OpenAL_DIR CACHE)
endif()
if (VI_OPENGL)
    set(OpenGL_GL_PREFERENCE "GLVND")
	find_path(OPENGL_LOCATION GL/gl.h OpenGL/OpenGL.h PATHS ${OPENGL_INCLUDE_DIR})
	if (OPENGL_LOCATION)
		target_include_directories(vitex PRIVATE ${OPENGL_LOCATION})
		find_package(OpenGL QUIET)
		if (NOT OpenGL_FOUND)
			find_library(OpenGL_FOUND "OpenGL")
			if (OpenGL_FOUND)
				set(OPENGL_LIBRARIES "${OpenGL_FOUND}")
				target_compile_definitions(vitex PRIVATE -DVI_OPENGL)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_OPENGL)
		endif()
		if (OpenGL_FOUND OR OPENGL_LIBRARIES)
			if (DEFINED OPENGL_LIBRARIES)
				string(STRIP "${OPENGL_LIBRARIES}" OPENGL_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${OPENGL_LIBRARIES})
				message(STATUS "Load library @opengl - OK")
			else()
				target_link_libraries(vitex PRIVATE OpenGL::GL)
				message(STATUS "Load package @opengl - OK")
			endif()
		else()
			message("Load library @opengl - lib not found")
		endif()
	else()
		message("Load library @opengl - include not found")
	endif()
    unset(OPENGL_LOCATION CACHE)
    unset(OpenGL_FOUND CACHE)
    unset(OPENGL_LIBRARIES CACHE)
    unset(OpenGL_GL_PREFERENCE CACHE)
endif()
if (VI_SDL2)
	find_path(SDL2_LOCATION SDL2/SDL.h)
	if (SDL2_LOCATION)
		target_include_directories(vitex PRIVATE ${SDL2_LOCATION})
		find_package(SDL2 CONFIG QUIET)
		if (NOT SDL2_FOUND)
			find_library(SDL2_FOUND "SDL2")
			if (SDL2_FOUND)
				set(SDL2_LIBRARIES "${SDL2_FOUND}")
				target_compile_definitions(vitex PRIVATE -DVI_SDL2)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_SDL2)
		endif()
		if (SDL2_FOUND OR SDL2_LIBRARIES)
			if (DEFINED SDL2_LIBRARIES)
				string(STRIP "${SDL2_LIBRARIES}" SDL2_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${SDL2_LIBRARIES})
				message(STATUS "Load library @sdl2 - OK")
			else()
				target_link_libraries(vitex PRIVATE SDL2::SDL2)
				message(STATUS "Load package @sdl2 - OK")
			endif()
		else()
			message("Load library @sdl2 - lib not found")
		endif()
	else()
		message("Load library @sdl2 - include not found")
	endif()
    unset(SDL2_LOCATION CACHE)
    unset(SDL2_FOUND CACHE)
    unset(SDL2_LIBRARIES CACHE)
    unset(SDL2_DIR CACHE)
endif()
if (VI_SPIRV)
	find_path(SPIRV_LOCATION spirv.hpp PATH_SUFFIXES "spirv")
	find_path(SPIRV_LOCATION spirv_cross.hpp PATH_SUFFIXES "spirv_cross")
	find_path(GLSLANG_LOCATION ShaderLang.h PATH_SUFFIXES "glslang/Public")
	if (SPIRV_LOCATION AND SPIRV_LOCATION AND GLSLANG_LOCATION)
		string(REPLACE "/Public" "" GLSLANG_LOCATION ${GLSLANG_LOCATION})
		target_include_directories(vitex PRIVATE ${SPIRV_LOCATION})
		target_include_directories(vitex PRIVATE ${SPIRV_LOCATION})
		target_include_directories(vitex PRIVATE ${GLSLANG_LOCATION})
		find_package(spirv_cross_core QUIET)
		find_package(spirv_cross_cpp QUIET)
		find_package(spirv_cross_glsl QUIET)
		find_package(spirv_cross_hlsl QUIET)
		find_package(spirv_cross_msl QUIET)
		if (NOT spirv_cross_core_FOUND OR NOT spirv_cross_cpp_FOUND OR NOT spirv_cross_glsl_FOUND OR NOT spirv_cross_hlsl_FOUND OR NOT spirv_cross_msl_FOUND)
			find_library(SPIRV_CORE_LIBRARY "spirv-cross-core")
			find_library(SPIRV_CORE_LIBRARY_D "spirv-cross-cored")
			find_library(SPIRV_CPP_LIBRARY "spirv-cross-cpp")
			find_library(SPIRV_CPP_LIBRARY_D "spirv-cross-cppd")
			find_library(SPIRV_GLSL_LIBRARY "spirv-cross-glsl")
			find_library(SPIRV_GLSL_LIBRARY_D "spirv-cross-glsld")
			find_library(SPIRV_HLSL_LIBRARY "spirv-cross-hlsl")
			find_library(SPIRV_HLSL_LIBRARY_D "spirv-cross-hlsld")
			find_library(SPIRV_MSL_LIBRARY "spirv-cross-msl")
			find_library(SPIRV_MSL_LIBRARY_D "spirv-cross-msld")
            if (SPIRV_CORE_LIBRARY AND SPIRV_CPP_LIBRARY AND SPIRV_GLSL_LIBRARY AND SPIRV_HLSL_LIBRARY AND SPIRV_MSL_LIBRARY)
			    set(SPIRV_RELEASE TRUE)
            else()
                set(SPIRV_RELEASE FALSE)
            endif()
            if (SPIRV_CORE_LIBRARY_D AND SPIRV_CPP_LIBRARY_D AND SPIRV_GLSL_LIBRARY_D AND SPIRV_HLSL_LIBRARY_D AND SPIRV_MSL_LIBRARY_D)
                set(SPIRV_DEBUG TRUE)
            else()
                set(SPIRV_DEBUG FALSE)
            endif()
        endif()
		if ((spirv_cross_core_FOUND AND spirv_cross_cpp_FOUND AND spirv_cross_glsl_FOUND AND spirv_cross_hlsl_FOUND AND spirv_cross_msl_FOUND) OR SPIRV_RELEASE)
			if (SPIRV_RELEASE)
				if (SPIRV_DEBUG)
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_CORE_LIBRARY} debug ${SPIRV_CORE_LIBRARY_D})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_CPP_LIBRARY} debug ${SPIRV_CPP_LIBRARY_D})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_GLSL_LIBRARY} debug ${SPIRV_GLSL_LIBRARY_D})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_HLSL_LIBRARY} debug ${SPIRV_HLSL_LIBRARY_D})
					target_link_libraries(vitex PRIVATE optimized ${SPIRV_MSL_LIBRARY} debug ${SPIRV_MSL_LIBRARY_D})
				else()
					target_link_libraries(vitex PRIVATE ${SPIRV_CORE_LIBRARY})
					target_link_libraries(vitex PRIVATE ${SPIRV_CPP_LIBRARY})
					target_link_libraries(vitex PRIVATE ${SPIRV_GLSL_LIBRARY})
					target_link_libraries(vitex PRIVATE ${SPIRV_HLSL_LIBRARY})
					target_link_libraries(vitex PRIVATE ${SPIRV_MSL_LIBRARY})
				endif()
				message(STATUS "Load library @spirv-cross - OK")
			else()
				target_link_libraries(vitex PRIVATE spirv-cross-core spirv-cross-cpp spirv-cross-glsl spirv-cross-hlsl spirv-cross-msl)
				message(STATUS "Load package @spriv-cross - OK")
			endif()
		else()
			message("Load library @spirv-cross - lib not found")
		endif()	
		find_package(glslang QUIET)
		if (NOT glslang_FOUND)
			find_library(glslang_FOUND "glslang")
			find_library(glslangd_FOUND "glslangd")
			if (glslang_FOUND)
				set(GLSLANG_LIBRARY "${glslang_FOUND}")
			endif()
			if (glslangd_FOUND)
				set(GLSLANG_LIBRARY_D "${glslangd_FOUND}")
			endif()
		endif()
		if (glslang_FOUND OR GLSLANG_LIBRARY)
		    find_package(Threads QUIET)
            if (Threads_FOUND)
                target_link_libraries(vitex PRIVATE Threads::Threads)
            endif()
			if (DEFINED GLSLANG_LIBRARY)
				string(STRIP "${GLSLANG_LIBRARY}" GLSLANG_LIBRARY)
				if (DEFINED GLSLANG_LIBRARY_D)
					target_link_libraries(vitex PRIVATE optimized ${GLSLANG_LIBRARY} debug ${GLSLANG_LIBRARY_D})
				else()
					target_link_libraries(vitex PRIVATE optimized ${GLSLANG_LIBRARY})
				endif()
				message(STATUS "Load library @glslang - OK")
			else()
				if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
					target_link_libraries(vitex PRIVATE glslang::SPVRemapper glslang::SPIRV glslang::glslang glslang::glslang-default-resource-limits)
				else()
					target_link_libraries(vitex PRIVATE glslang::HLSL glslang::SPIRV glslang::glslang glslang::OGLCompiler)
				endif()
				message(STATUS "Load package @glslang - OK")
			endif()
		else()
			message("Load library @glslang - lib not found")
		endif()
		if (((spirv_cross_core_FOUND AND spirv_cross_cpp_FOUND AND spirv_cross_glsl_FOUND AND spirv_cross_hlsl_FOUND AND spirv_cross_msl_FOUND AND spirv_cross_reflect_FOUND AND spirv_cross_util_FOUND) OR SPIRV_RELEASE) AND (glslang_FOUND OR GLSLANG_LIBRARY))
			target_compile_definitions(vitex PRIVATE -DVI_SPIRV)
		endif()
	else()
		message("Load library @spirv-cross/@glslang - include(s) not found")
	endif()
    unset(SPIRV_LOCATION CACHE)
    unset(SPIRV_LOCATION CACHE)
    unset(GLSLANG_LOCATION CACHE)
    unset(spirv_cross_cpp_FOUND CACHE)
    unset(spirv_cross_glsl_FOUND CACHE)
    unset(spirv_cross_hlsl_FOUND CACHE)
    unset(spirv_cross_msl_FOUND CACHE)
    unset(glslang_FOUND CACHE)
    unset(glslangd_FOUND CACHE)
    unset(SPIRV_CORE_LIBRARY CACHE)
    unset(SPIRV_CORE_LIBRARY_D CACHE)
    unset(SPIRV_CPP_LIBRARY CACHE)
    unset(SPIRV_CPP_LIBRARY_D CACHE)
    unset(SPIRV_GLSL_LIBRARY CACHE)
    unset(SPIRV_GLSL_LIBRARY_D CACHE)
    unset(SPIRV_HLSL_LIBRARY CACHE)
    unset(SPIRV_HLSL_LIBRARY_D CACHE)
    unset(SPIRV_MSL_LIBRARY CACHE)
    unset(SPIRV_MSL_LIBRARY_D CACHE)
    unset(SPIRV_RELEASE CACHE)
    unset(SPIRV_DEBUG CACHE)
    unset(SPIRV-Tools-opt_DIR CACHE)
    unset(SPIRV-Tools_DIR CACHE)
    unset(GLSLANG_LIBRARY CACHE)
    unset(GLSLANG_LIBRARY_D CACHE)
    unset(glslang_DIR CACHE)
    unset(spirv_cross_core_DIR CACHE)
    unset(spirv_cross_cpp_DIR CACHE)
    unset(spirv_cross_glsl_DIR CACHE)
    unset(spirv_cross_hlsl_DIR CACHE)
    unset(spirv_cross_msl_DIR CACHE)
endif()